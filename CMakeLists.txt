cmake_minimum_required(VERSION 3.5)
project(ServalRPC)

set(CMAKE_INSTALL_SYSCONFDIR "${CMAKE_INSTALL_PREFIX}/etc")

# sysconfdir definition
set(CMAKE_C_FLAGS -DSYSCONFDIR=\\"${CMAKE_INSTALL_SYSCONFDIR}\\")

# Optimisation, position indipendent code, security check for functions like printf, and make it impossible to compile potential vulnerable code.
# Also add security checks for functions like memcpy, strcpy, etc.
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3 -fPIC -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2")

# Security (stack protection)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fstack-protector-all --param=ssp-buffer-size=4")

# SQLite (disable data functions, disable interactive compiling, no deprecated functions, disable extension loading functions, no virtual tables, no authorization)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_DATETIME_FUNCS -DSQLITE_OMIT_COMPILEOPTION_DIAGS -DSQLITE_OMIT_DEPRECATED -DSQLITE_OMIT_LOAD_EXTENSION -DSQLITE_OMIT_VIRTUALTABLE -DSQLITE_OMIT_AUTHORIZATION")

# Enable some functions defined in POSIX 600 standard and definitions normally not available or deprecated in macOS (i.e bzero).
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_XOPEN_SOURCE=600 -D_DARWIN_C_SOURCE")

# Enable all and even more warnings, treat them as errors and show all errors.
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra -Werror")

INCLUDE (CheckIncludeFiles)

CHECK_INCLUDE_FILES (stdio.h HAVE_STDIO_H)
CHECK_INCLUDE_FILES (linux/if.h HAVE_LINUX_IF_H)
CHECK_INCLUDE_FILES (jni.h HAVE_JNI_H)
CHECK_INCLUDE_FILES (sys/vfs.h HAVE_SYS_VFS_H)
CHECK_INCLUDE_FILES (linux/netlink.h HAVE_LINUX_NETLINK_H)
CHECK_INCLUDE_FILES (linux/rtnetlink.h HAVE_LINUX_RTNETLINK_H)
CHECK_INCLUDE_FILES (ucred.h HAVE_UCRED_H)
CHECK_INCLUDE_FILES (alloca.h HAVE_ALLOCA_H)
CHECK_INCLUDE_FILES (arpa/inet.h HAVE_ARPA_INET_H)
CHECK_INCLUDE_FILES (curl/curl.h HAVE_CURL_CURL_H)
CHECK_INCLUDE_FILES (stddef.h HAVE_STDDEF_H)
CHECK_INCLUDE_FILES (stdint.h HAVE_STDINT_H)
CHECK_INCLUDE_FILES (errno.h HAVE_ERRNO_H)
CHECK_INCLUDE_FILES (stdlib.h HAVE_STDLIB_H)
CHECK_INCLUDE_FILES (stdarg.h HAVE_STDARG_H)
CHECK_INCLUDE_FILES (sys/types.h HAVE_SYS_TYPES_H)
CHECK_INCLUDE_FILES (ctype.h HAVE_CTYPE_H)
CHECK_INCLUDE_FILES (fcntl.h HAVE_FCNTL_H)
CHECK_INCLUDE_FILES (inttypes.h HAVE_INTTYPES_H)
CHECK_INCLUDE_FILES (limits.h HAVE_LIMITS_H)
CHECK_INCLUDE_FILES (sys/un.h HAVE_SYS_UN_H)
CHECK_INCLUDE_FILES (strings.h HAVE_STRINGS_H)
CHECK_INCLUDE_FILES (unistd.h HAVE_UNISTD_H)
CHECK_INCLUDE_FILES (string.h HAVE_STRING_H)
CHECK_INCLUDE_FILES (sys/socket.h HAVE_SYS_SOCKET_H)
CHECK_INCLUDE_FILES (sys/mman.h HAVE_SYS_MMAN_H)
CHECK_INCLUDE_FILES (sys/time.h HAVE_SYS_TIME_H)
CHECK_INCLUDE_FILES (sys/ucred.h HAVE_SYS_UCRED_H)
CHECK_INCLUDE_FILES (sys/stat.h HAVE_SYS_STAT_H)
CHECK_INCLUDE_FILES (poll.h HAVE_POLL_H)
CHECK_INCLUDE_FILES (netdb.h HAVE_NETDB_H)
CHECK_INCLUDE_FILES (net/if.h HAVE_NET_IF_H)
CHECK_INCLUDE_FILES (netinet/in.h HAVE_NETINET_IN_H)
CHECK_INCLUDE_FILES (ifaddrs.h HAVE_IFADDRS_H)
CHECK_INCLUDE_FILES (sys/sockio.h HAVE_SYS_SOCKIO_H)

IF(HAVE_STDIO_H)
    add_definitions(-DHAVE_STDIO_H=1)
ENDIF()
IF(HAVE_LINUX_IF_H)
    add_definitions(-DHAVE_LINUX_IF_H=1)
ENDIF()
IF(HAVE_JNI_H)
    add_definitions(-DHAVE_JNI_H=1)
ENDIF()
IF(HAVE_SYS_VFS_H)
    add_definitions(-DHAVE_SYS_VFS_H=1)
ENDIF()
IF(HAVE_LINUX_NETLINK_H)
    add_definitions(-DHAVE_LINUX_NETLINK_H=1)
ENDIF()
IF(HAVE_LINUX_RTNETLINK_H)
    add_definitions(-DHAVE_LINUX_RTNETLINK_H=1)
ENDIF()
IF(HAVE_UCRED_H)
    add_definitions(-DHAVE_UCRED_H=1)
ENDIF()
IF(HAVE_ALLOCA_H)
    add_definitions(-DHAVE_ALLOCA_H=1)
ENDIF()
IF(HAVE_ARPA_INET_H)
    add_definitions(-DHAVE_ARPA_INET_H=1)
ENDIF()
IF(HAVE_CURL_CURL_H)
    add_definitions(-DHAVE_CURL_CURL_H=1)
ENDIF()
IF(HAVE_STDDEF_H)
    add_definitions(-DHAVE_STDDEF_H=1)
ENDIF()
IF(HAVE_ERRNO_H)
    add_definitions(-DHAVE_ERRNO_H=1)
ENDIF()
IF(HAVE_STDLIB_H)
    add_definitions(-DHAVE_STDLIB_H=1)
ENDIF()
IF(HAVE_STDARG_H)
    add_definitions(-DHAVE_STARG_H=1)
ENDIF()
IF(HAVE_SYS_TYPES_H)
    add_definitions(-DHAVE_SYS_TYPES_H=1)
ENDIF()
IF(HAVE_CTYPE_H)
    add_definitions(-DHAVE_CTYPE_H=1)
ENDIF()
IF(HAVE_FCNTL_H)
    add_definitions(-DHAVE_FCNTL_H=1)
ENDIF()
IF(HAVE_INTTYPES_H)
    add_definitions(-DHAVE_INTTYPES_H=1)
ENDIF()
IF(HAVE_LIMITS_H)
    add_definitions(-DHAVE_LIMITS_H=1)
ENDIF()
IF(HAVE_SYS_UN_H)
    add_definitions(-DHAVE_SYS_UN_H=1)
ENDIF()
IF(HAVE_STRINGS_H)
    add_definitions(-DHAVE_STRINGS_H=1)
ENDIF()
IF(HAVE_UNISTD_H)
    add_definitions(-DHAVE_UNISTD_H=1)
ENDIF()
IF(HAVE_STRING_H)
    add_definitions(-DHAVE_STRING_H=1)
ENDIF()
IF(HAVE_SYS_SOCKET_H)
    add_definitions(-DHAVE_SYS_SOCKET_H=1)
ENDIF()
IF(HAVE_SYS_MMAN_H)
    add_definitions(-DHAVE_SYS_MMAN_H=1)
ENDIF()
IF(HAVE_SYS_TIME_H)
    add_definitions(-DHAVE_SYS_TIME_H=1)
ENDIF()
IF(HAVE_SYS_UCRED_H)
    add_definitions(-DHAVE_SYS_UCRED_H=1)
ENDIF()
IF(HAVE_SYS_STAT_H)
    add_definitions(-DHAVE_SYS_STAT_H=1)
ENDIF()
IF(HAVE_POLL_H)
    add_definitions(-DHAVE_POLL_H=1)
ENDIF()
IF(HAVE_NETDB_H)
    add_definitions(-DHAVE_NETDB_H=1)
ENDIF()
IF(HAVE_NET_IF_H)
    add_definitions(-DHAVE_NET_IF_H=1)
ENDIF()
IF(HAVE_NETINET_IN_H)
    add_definitions(-DHAVE_NETINET_IN_H=1)
ENDIF()
IF(HAVE_IFADDRS_H)
    add_definitions(-DHAVE_IFADDRS_H=1)
ENDIF()
IF(HAVE_SYS_SOCKIO_H)
    add_definitions(-DHAVE_STDIO_H=1)
ENDIF()
IF(HAVE_STDIO_H)
    add_definitions(-DHAVE_SYS_SOCKIO_H=1)
ENDIF()

# Include search paths
include_directories( "SYSTEM" "${CMAKE_SOURCE_DIR}/serval/general" "${CMAKE_SOURCE_DIR}/serval/sqlite-amalgamation-3100200" "${CMAKE_SOURCE_DIR}/serval/nacl")

file(GLOB SRCS *.c)
file(GLOB_RECURSE HDRS *.h)

ADD_EXECUTABLE(ServalRPC ${SRCS} ${HDRS})
set_target_properties(ServalRPC PROPERTIES OUTPUT_NAME servalrpc)
TARGET_LINK_LIBRARIES(ServalRPC ${CMAKE_SOURCE_DIR}/libservalrpc.a curl)