m4trace:/usr/share/aclocal/ax_gcc_func_attribute.m4:78: -1- AC_DEFUN([AX_GCC_FUNC_ATTRIBUTE], [
    AS_VAR_PUSHDEF([ac_var], [ax_cv_have_func_attribute_$1])

    AC_CACHE_CHECK([for __attribute__(($1))], [ac_var], [
        AC_LINK_IFELSE([AC_LANG_PROGRAM([
            m4_case([$1],
                [alias], [
                    int foo( void ) { return 0; }
                    int bar( void ) __attribute__(($1("foo")));
                ],
                [aligned], [
                    int foo( void ) __attribute__(($1(32)));
                ],
                [alloc_size], [
                    void *foo(int a) __attribute__(($1(1)));
                ],
                [always_inline], [
                    inline __attribute__(($1)) int foo( void ) { return 0; }
                ],
                [artificial], [
                    inline __attribute__(($1)) int foo( void ) { return 0; }
                ],
                [cold], [
                    int foo( void ) __attribute__(($1));
                ],
                [const], [
                    int foo( void ) __attribute__(($1));
                ],
                [constructor], [
                    int foo( void ) __attribute__(($1));
                ],
                [deprecated], [
                    int foo( void ) __attribute__(($1("")));
                ],
                [destructor], [
                    int foo( void ) __attribute__(($1));
                ],
                [dllexport], [
                    __attribute__(($1)) int foo( void ) { return 0; }
                ],
                [dllimport], [
                    int foo( void ) __attribute__(($1));
                ],
                [error], [
                    int foo( void ) __attribute__(($1("")));
                ],
                [externally_visible], [
                    int foo( void ) __attribute__(($1));
                ],
                [flatten], [
                    int foo( void ) __attribute__(($1));
                ],
                [format], [
                    int foo(const char *p, ...) __attribute__(($1(printf, 1, 2)));
                ],
                [format_arg], [
                    char *foo(const char *p) __attribute__(($1(1)));
                ],
                [gnu_inline], [
                    inline __attribute__(($1)) int foo( void ) { return 0; }
                ],
                [hot], [
                    int foo( void ) __attribute__(($1));
                ],
                [ifunc], [
                    int my_foo( void ) { return 0; }
                    static int (*resolve_foo(void))(void) { return my_foo; }
                    int foo( void ) __attribute__(($1("resolve_foo")));
                ],
                [leaf], [
                    __attribute__(($1)) int foo( void ) { return 0; }
                ],
                [malloc], [
                    void *foo( void ) __attribute__(($1));
                ],
                [noclone], [
                    int foo( void ) __attribute__(($1));
                ],
                [noinline], [
                    __attribute__(($1)) int foo( void ) { return 0; }
                ],
                [nonnull], [
                    int foo(char *p) __attribute__(($1(1)));
                ],
                [noreturn], [
                    void foo( void ) __attribute__(($1));
                ],
                [nothrow], [
                    int foo( void ) __attribute__(($1));
                ],
                [optimize], [
                    __attribute__(($1(3))) int foo( void ) { return 0; }
                ],
                [pure], [
                    int foo( void ) __attribute__(($1));
                ],
                [unused], [
                    int foo( void ) __attribute__(($1));
                ],
                [used], [
                    int foo( void ) __attribute__(($1));
                ],
                [visibility], [
                    int foo_def( void ) __attribute__(($1("default")));
                    int foo_hid( void ) __attribute__(($1("hidden")));
                    int foo_int( void ) __attribute__(($1("internal")));
                    int foo_pro( void ) __attribute__(($1("protected")));
                ],
                [warning], [
                    int foo( void ) __attribute__(($1("")));
                ],
                [warn_unused_result], [
                    int foo( void ) __attribute__(($1));
                ],
                [weak], [
                    int foo( void ) __attribute__(($1));
                ],
                [weakref], [
                    static int foo( void ) { return 0; }
                    static int bar( void ) __attribute__(($1("foo")));
                ],
                [
                 m4_warn([syntax], [Unsupported attribute $1, the test may fail])
                 int foo( void ) __attribute__(($1));
                ]
            )], [])
            ],
            dnl GCC doesn't exit with an error if an unknown attribute is
            dnl provided but only outputs a warning, so accept the attribute
            dnl only if no warning were issued.
            [AS_IF([test -s conftest.err],
                [AS_VAR_SET([ac_var], [no])],
                [AS_VAR_SET([ac_var], [yes])])],
            [AS_VAR_SET([ac_var], [no])])
    ])

    AS_IF([test yes = AS_VAR_GET([ac_var])],
        [AC_DEFINE_UNQUOTED(AS_TR_CPP(HAVE_FUNC_ATTRIBUTE_$1), 1,
            [Define to 1 if the system has the `$1' function attribute])], [])

    AS_VAR_POPDEF([ac_var])
])
m4trace:/usr/share/aclocal/ax_gcc_var_attribute.m4:56: -1- AC_DEFUN([AX_GCC_VAR_ATTRIBUTE], [
    AS_VAR_PUSHDEF([ac_var], [ax_cv_have_var_attribute_$1])

    AC_CACHE_CHECK([for __attribute__(($1))], [ac_var], [
        AC_LINK_IFELSE([AC_LANG_PROGRAM([
            m4_case([$1],
                [aligned], [
                    int foo __attribute__(($1(32)));
                ],
                [cleanup], [
                    int bar(int *t) { return *t; };
                ],
                [common], [
                    int foo __attribute__(($1));
                ],
                [nocommon], [
                    int foo __attribute__(($1));
                ],
                [deprecated], [
                    int foo __attribute__(($1)) = 0;
                ],
                [mode], [
                    long foo __attribute__(($1(word)));
                ],
                [packed], [
                    struct bar {
                        int baz __attribute__(($1));
                    };
                ],
                [tls_model], [
                    __thread int bar1 __attribute__(($1("global-dynamic")));
                    __thread int bar2 __attribute__(($1("local-dynamic")));
                    __thread int bar3 __attribute__(($1("initial-exec")));
                    __thread int bar4 __attribute__(($1("local-exec")));
                ],
                [unused], [
                    int foo __attribute__(($1));
                ],
                [used], [
                    int foo __attribute__(($1));
                ],
                [vector_size], [
                    int foo __attribute__(($1(16)));
                ],
                [weak], [
                    int foo __attribute__(($1));
                ],
                [dllimport], [
                    int foo __attribute__(($1));
                ],
                [dllexport], [
                    int foo __attribute__(($1));
                ],
                [
                 m4_warn([syntax], [Unsupported attribute $1, the test may fail])
                 int foo __attribute__(($1));
                ]
            )], [
            m4_case([$1],
                [cleanup], [
                    int foo __attribute__(($1(bar))) = 0;
                    foo = foo + 1;
                ],
                []
            )])
            ],
            dnl GCC doesn't exit with an error if an unknown attribute is
            dnl provided but only outputs a warning, so accept the attribute
            dnl only if no warning were issued.
            [AS_IF([test -s conftest.err],
                [AS_VAR_SET([ac_var], [no])],
                [AS_VAR_SET([ac_var], [yes])])],
            [AS_VAR_SET([ac_var], [no])])
    ])

    AS_IF([test yes = AS_VAR_GET([ac_var])],
        [AC_DEFINE_UNQUOTED(AS_TR_CPP(HAVE_VAR_ATTRIBUTE_$1), 1,
            [Define to 1 if the system has the `$1' variable attribute])], [])

    AS_VAR_POPDEF([ac_var])
])
m4trace:configure.ac:2: -1- m4_pattern_forbid([^_?A[CHUM]_])
m4trace:configure.ac:2: -1- m4_pattern_forbid([_AC_])
m4trace:configure.ac:2: -1- m4_pattern_forbid([^LIBOBJS$], [do not use LIBOBJS directly, use AC_LIBOBJ (see section `AC_LIBOBJ vs LIBOBJS'])
m4trace:configure.ac:2: -1- m4_pattern_allow([^AS_FLAGS$])
m4trace:configure.ac:2: -1- m4_pattern_forbid([^_?m4_])
m4trace:configure.ac:2: -1- m4_pattern_forbid([^dnl$])
m4trace:configure.ac:2: -1- m4_pattern_forbid([^_?AS_])
m4trace:configure.ac:2: -1- m4_pattern_allow([^SHELL$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^PATH_SEPARATOR$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^PACKAGE_NAME$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^PACKAGE_TARNAME$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^PACKAGE_VERSION$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^PACKAGE_STRING$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^PACKAGE_BUGREPORT$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^PACKAGE_URL$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^exec_prefix$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^prefix$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^program_transform_name$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^bindir$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^sbindir$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^libexecdir$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^datarootdir$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^datadir$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^sysconfdir$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^sharedstatedir$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^localstatedir$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^includedir$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^oldincludedir$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^docdir$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^infodir$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^htmldir$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^dvidir$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^pdfdir$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^psdir$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^libdir$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^localedir$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^mandir$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^PACKAGE_NAME$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^PACKAGE_TARNAME$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^PACKAGE_VERSION$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^PACKAGE_STRING$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^PACKAGE_BUGREPORT$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^PACKAGE_URL$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^DEFS$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^ECHO_C$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^ECHO_N$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^ECHO_T$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^build_alias$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^host_alias$])
m4trace:configure.ac:2: -1- m4_pattern_allow([^target_alias$])
m4trace:configure.ac:3: -1- AC_CONFIG_MACRO_DIR([m4])
m4trace:configure.ac:5: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:5: -1- m4_pattern_allow([^CFLAGS$])
m4trace:configure.ac:5: -1- m4_pattern_allow([^LDFLAGS$])
m4trace:configure.ac:5: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:5: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:5: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:5: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:5: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:5: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:5: -1- m4_pattern_allow([^ac_ct_CC$])
m4trace:configure.ac:5: -1- m4_pattern_allow([^EXEEXT$])
m4trace:configure.ac:5: -1- m4_pattern_allow([^OBJEXT$])
m4trace:configure.ac:8: -1- AX_GCC_FUNC_ATTRIBUTE([aligned])
m4trace:configure.ac:8: -1- m4_pattern_allow([^HAVE_FUNC_ATTRIBUTE_ALIGNED$])
m4trace:configure.ac:9: -1- AX_GCC_FUNC_ATTRIBUTE([unused])
m4trace:configure.ac:9: -1- m4_pattern_allow([^HAVE_FUNC_ATTRIBUTE_UNUSED$])
m4trace:configure.ac:10: -1- AX_GCC_FUNC_ATTRIBUTE([used])
m4trace:configure.ac:10: -1- m4_pattern_allow([^HAVE_FUNC_ATTRIBUTE_USED$])
m4trace:configure.ac:11: -1- AX_GCC_VAR_ATTRIBUTE([section])
m4trace:configure.ac:11: -1- _m4_warn([syntax], [Unsupported attribute section, the test may fail], [../../lib/autoconf/lang.m4:224: AC_LANG_SOURCE is expanded from...
../../lib/autoconf/lang.m4:241: AC_LANG_PROGRAM is expanded from...
../../lib/autoconf/lang.m4:193: AC_LANG_CONFTEST is expanded from...
../../lib/autoconf/general.m4:2661: _AC_LINK_IFELSE is expanded from...
../../lib/autoconf/general.m4:2678: AC_LINK_IFELSE is expanded from...
../../lib/m4sugar/m4sh.m4:639: AS_IF is expanded from...
../../lib/autoconf/general.m4:2031: AC_CACHE_VAL is expanded from...
../../lib/autoconf/general.m4:2052: AC_CACHE_CHECK is expanded from...
/usr/share/aclocal/ax_gcc_var_attribute.m4:56: AX_GCC_VAR_ATTRIBUTE is expanded from...
configure.ac:11: the top level])
m4trace:configure.ac:11: -1- m4_pattern_allow([^HAVE_VAR_ATTRIBUTE_SECTION$])
m4trace:configure.ac:12: -1- AX_GCC_VAR_ATTRIBUTE([section_seg])
m4trace:configure.ac:12: -1- _m4_warn([syntax], [Unsupported attribute section_seg, the test may fail], [../../lib/autoconf/lang.m4:224: AC_LANG_SOURCE is expanded from...
../../lib/autoconf/lang.m4:241: AC_LANG_PROGRAM is expanded from...
../../lib/autoconf/lang.m4:193: AC_LANG_CONFTEST is expanded from...
../../lib/autoconf/general.m4:2661: _AC_LINK_IFELSE is expanded from...
../../lib/autoconf/general.m4:2678: AC_LINK_IFELSE is expanded from...
../../lib/m4sugar/m4sh.m4:639: AS_IF is expanded from...
../../lib/autoconf/general.m4:2031: AC_CACHE_VAL is expanded from...
../../lib/autoconf/general.m4:2052: AC_CACHE_CHECK is expanded from...
/usr/share/aclocal/ax_gcc_var_attribute.m4:56: AX_GCC_VAR_ATTRIBUTE is expanded from...
configure.ac:12: the top level])
m4trace:configure.ac:12: -1- m4_pattern_allow([^HAVE_VAR_ATTRIBUTE_SECTION_SEG$])
m4trace:configure.ac:15: -1- m4_pattern_allow([^CPP$])
m4trace:configure.ac:15: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:15: -1- m4_pattern_allow([^CPP$])
m4trace:configure.ac:15: -1- m4_pattern_allow([^GREP$])
m4trace:configure.ac:15: -1- m4_pattern_allow([^EGREP$])
m4trace:configure.ac:15: -1- m4_pattern_allow([^STDC_HEADERS$])
m4trace:configure.ac:15: -1- m4_pattern_allow([^SIZEOF_OFF_T$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^USE_ABSTRACT_NAMESPACE$])
m4trace:configure.ac:85: -1- m4_pattern_allow([^HAVE_SSP$])
m4trace:configure.ac:93: -1- _m4_warn([obsolete], [AC_OUTPUT should be used without arguments.
You should run autoupdate.], [])
m4trace:configure.ac:93: -1- m4_pattern_allow([^LIB@&t@OBJS$])
m4trace:configure.ac:93: -1- m4_pattern_allow([^LTLIBOBJS$])
